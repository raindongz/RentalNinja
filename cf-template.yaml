AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  GetPresignedUrlImg:
    Type: String
    Description: ECR Image URI for getpresigned Lambda

  GetPostDetailImg:
    Type: String
    Description: ECR Image URI for GetPostDetail Lambda

  CognitoArn:
      Type: String
      Description: cog-arn

Resources:
  # S3 Bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: rentalninjia-test
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  # S3 Bucket Policy
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt LambdaExecutionRole.Arn   # Restrict access to Lambda execution role
            Action:
              - s3:GetObject
              - s3:PutObject
            Resource:
              - arn:aws:s3:::rentalninjia-test/*


######
  # DynamoDB Table
  PostTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: posts_test
      AttributeDefinitions:
        - AttributeName: post_id_test
          AttributeType: S
      KeySchema:
        - AttributeName: post_id_test
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
######



  # Lambda Function for Get Post Detail API (Using ECR)
  GetPresignedUrl:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: get-presigned-url
      PackageType: Image
      Code:
        ImageUri: !Ref GetPresignedUrlImg
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 15

  GetPostDetail:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: get-post-detail
      PackageType: Image
      Code:
        ImageUri: !Ref GetPostDetailImg
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 15


  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole-test-cf
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: dynamodb_and_cloudwatch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                  - logs:*
                Resource: "*"

        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - arn:aws:s3:::rentalninjia-test/*

######
  # API Gateway
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: postAppApi
      EndpointConfiguration:
        Types:
          - REGIONAL
    DependsOn:
      - GetPresignedUrl
      - GetPostDetail

  # Cognito Authorizer in API Gateway
  CognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      RestApiId: !Ref ApiGatewayRestApi
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - !Ref CognitoArn

  # API Gateway Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GetPresignedUrlMethod   # Ensure methods are created before deployment
      - GetPresignedOptionsMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: test-cf


  # API Gateway Resource for Get Post Detail API
  GetPresignedUrlResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: get-presigned-url
      RestApiId: !Ref ApiGatewayRestApi

  GetPostDetailResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: get-post-detail
      RestApiId: !Ref ApiGatewayRestApi


  # API Gateway Method for Get Post Detail API
  GetPresignedUrlMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      ResourceId: !Ref GetPresignedUrlResource
      RestApiId: !Ref ApiGatewayRestApi
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPresignedUrl.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # OPTIONS Method for CORS
  GetPresignedOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId: !Ref GetPostDetailResource
      RestApiId: !Ref ApiGatewayRestApi
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true


  # Lambda Permissions for API Gateway to Invoke Lambda
  GetPresignedUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetPresignedUrl
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/get-presigned-url


### Function2

  # API Gateway Method for Get Post Detail API
  GetPostDetailMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      ResourceId: !Ref GetPostDetailResource
      RestApiId: !Ref ApiGatewayRestApi
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPostDetail.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # OPTIONS Method for CORS
  GetPostDetailOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId: !Ref GetPostDetailResource
      RestApiId: !Ref ApiGatewayRestApi
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true


  # Lambda Permissions for API Gateway to Invoke Lambda
  GetPostDetailPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetPostDetail
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/gget-post-detail
